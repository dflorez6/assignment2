// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assignment2.Models;

#nullable disable

namespace assignment2.Migrations
{
    [DbContext(typeof(CoursesContext))]
    [Migration("20231126053041_DBSeed")]
    partial class DBSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("assignment2.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            Instructor = "Peter Mazdiak",
                            Name = "Programming Microsoft Web Technologies",
                            Room = "1C09",
                            Start = new DateTime(2024, 1, 18, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseId = 2,
                            Instructor = "Noman Atique",
                            Name = "Programming Concepts II",
                            Room = "4G15",
                            Start = new DateTime(2024, 1, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseId = 3,
                            Instructor = "Peter Mazdiak",
                            Name = "Distributed Application Development",
                            Room = "3G19",
                            Start = new DateTime(2023, 12, 19, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("assignment2.Models.Status", b =>
                {
                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = "ConfirmationMessageNotSent",
                            StatusName = "Confirmation Message Not Sent"
                        },
                        new
                        {
                            StatusId = "ConfirmationMessageSent",
                            StatusName = "Confirmation Message Sent"
                        },
                        new
                        {
                            StatusId = "EnrollmentConfirmed",
                            StatusName = "Enrollment Confirmed"
                        },
                        new
                        {
                            StatusId = "EnrollmentDeclined",
                            StatusName = "Enrollment Declined"
                        });
                });

            modelBuilder.Entity("assignment2.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("ConfirmationMessageNotSent");

                    b.HasKey("StudentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StatusId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 1,
                            Email = "dflorez6@gmail.com",
                            Name = "Bart Simpson",
                            StatusId = "ConfirmationMessageNotSent"
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 1,
                            Email = "dflorez6.dev@gmail.com",
                            Name = "Lisa Simpson",
                            StatusId = "ConfirmationMessageNotSent"
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 2,
                            Email = "dflorez6@gmail.com",
                            Name = "Marge Simpson",
                            StatusId = "ConfirmationMessageNotSent"
                        },
                        new
                        {
                            StudentId = 4,
                            CourseId = 2,
                            Email = "dflorez6.dev@gmail.com",
                            Name = "Homer Simpson",
                            StatusId = "ConfirmationMessageNotSent"
                        },
                        new
                        {
                            StudentId = 5,
                            CourseId = 3,
                            Email = "dflorez6@gmail.com",
                            Name = "Maggie Simpson",
                            StatusId = "ConfirmationMessageNotSent"
                        },
                        new
                        {
                            StudentId = 6,
                            CourseId = 3,
                            Email = "dflorez6.dev@gmail.com",
                            Name = "Ned Flanders",
                            StatusId = "ConfirmationMessageNotSent"
                        });
                });

            modelBuilder.Entity("assignment2.Models.Student", b =>
                {
                    b.HasOne("assignment2.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assignment2.Models.Status", "Status")
                        .WithMany("Students")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("assignment2.Models.Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("assignment2.Models.Status", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
